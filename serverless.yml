service:
  name: boilerplate #TODO update service

# =========================================================================================
# Functions - Add function modules here
# =========================================================================================
functions:
  - ${file(src/api.yml)}

custom:
  defaults:
    stage: local
    region: us-east-1
    runtime: nodejs12.x
    memorySize: 256
    timeout: 10
    bucketPrefix: post.publisher

  stages:
    - local
    - development
    - staging
    - production

  apigwBinary:
    types:
      - "image/*"
      - "text/html"
      - "multipart/form-data"
      - "application/octet-stream"

# Local Stage Config
  local:
    logLevel: debug
    timeout: 10
    memorySize: 256
    logRetentionInDays: 1

  # Development Stage Config
  development:
    logLevel: debug
    timeout: 30
    memorySize: 256
    logRetentionInDays: 1

  # Staging Stage Config
  staging:
    logLevel: debug
    timeout: 30
    memorySize: 256
    logRetentionInDays: 7

  # Production Stage Config
  production:
    logLevel: info
    timeout: 30
    memorySize: 512
    logRetentionInDays: 90

  serverless-offline:
    httpPort: 9090
    apiKey: my-api-key
    noPrependStageInUrl: true

  dynamodb:
    stages:
      - local
    start:
      noStart: false
      port: 9000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      region: ${self:provider.region}
      migrate: true
      seed: false

  serverless-offline-sqs:
    autoCreate: true # create queue if not exists
    apiVersion: "2012-11-05"
    endpoint: http://0.0.0.0:9324
    region: ${self:custom.defaults.region}
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: false
    # host: 0.0.0.0 # Optional, defaults to 127.0.0.1 if not provided to serverless-offline
    # sns-endpoint: http://127.0.0.1:4567 # Optional. Only if you want to use a custom endpoint
    # accountId: 123456789012 # Optional

  s3:
    bucketName: ${self:custom.defaults.bucketPrefix}.${self:service} #TODO update bucket name
    host: localhost
    port: 9010
    directory: ./.s3
    cors: false
    accessKeyId: S3RVER
    secretAccessKey: S3RVER
  
  prune:
    automatic: true
    includeLayers: true
    number: 3

provider:
  name: aws
  region: ${self:custom.defaults.region}
  runtime: ${self:custom.defaults.runtime}
  # To push code from local system add profile
  # profile: serverless-backend
  stage: ${opt:stage, self:custom.defaults.stage}
  memorySize: ${self:custom.${self:provider.stage}.memorySize}
  timeout: ${self:custom.${self:provider.stage}.timeout}
  apiGateway: 
    shouldStartNameWithService: true
    minimumCompressionSize: 1024
  lambdaHashingVersion: 20201221
  deploymentBucket:
    name: deploys.${self:custom.defaults.bucketPrefix}.${self:service}
    serverSideEncryption: AES256
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
        - sqs:*
      Resource: '*'
  environment:
    NODE_ENV: ${self:provider.stage}
    LOG_LEVEL: ${self:custom.${self:provider.stage}.logLevel}
    AWS_REGION: ${self:provider.region}
    AWS_ACCOUNT_ID: #{AWS::AccountId}

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-optimize
  - serverless-dynamodb-local
  - serverless-apigw-binary
  - serverless-offline-sqs
  - serverless-s3-local
  - serverless-stage-manager
  - serverless-deployment-bucket
  - serverless-offline-sns
  - serverless-prune-plugin
  - serverless-offline

package:
  individually: true

resources: 
  - ${file(yml/sqs.yml)}
  - ${file(yml/s3.yml)}